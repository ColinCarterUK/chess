// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine::games::Challenge is

	@state_num(1);
	@dialect("oal");
	state created;

	@state_num(2);
	@dialect("oal");
	state pending;

	@state_num(3);
	@dialect("oal");
	state 'in progress';

	@state_num(4);
	@dialect("oal");
	state complete;

	@event_num(1);
	event 'respond to challenge';

	@event_num(2);
	event 'reject challenge';

	@event_num(3);
	event 'accept challenge';

	@event_num(4);
	event 'challenger canceled';

	@event_num(5);
	event error('message': in string);

	@event_num(6);
	event 'game over';

	state model is

		|                        | 'respond to challenge' | 'reject challenge'     | 'accept challenge'     | 'challenger canceled'  | error                  | 'game over'            |
		| ---------------------- | ---------------------- | ---------------------- | ---------------------- | ---------------------- | ---------------------- | ---------------------- |
		| created                | pending                | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          |
		| pending                | cannot_happen          | complete               | 'in progress'          | complete               | complete               | cannot_happen          |
		| 'in progress'          | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          | complete               |
		| complete               | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          | cannot_happen          |

	end state model;

	state pending is
		@noparse
		accept_challenge = true;
		reason = DeclineReason::GENERIC;
		
		// only accept the challenge if not currently in a game
		select any game from instances of Game where (selected.game_state.status == GameStatus::CREATED or selected.game_state.status == GameStatus::STARTED);
		if not empty game then
			accept_challenge = false;
			reason = DeclineReason::LATER;
		end if;
		
		// only accept unrated standard games
		if self.rated then
			accept_challenge = false;
			reason = DeclineReason::CASUAL;
		end if;
		
		if self.variant != Variant::STANDARD then
			accept_challenge = false;
			reason = DeclineReason::STANDARD;
		end if;
		
		if accept_challenge then
			result = chess::acceptChallenge(challenge_id:self.id);
			if result.result then
				generate Challenge3:'accept challenge' to self;
			else
				generate Challenge5:'error'(message:result.error.error) to self;
			end if;
		else
			result = chess::declineChallenge(challenge_id:self.id, reason:reason);
			if result.result then
				generate Challenge2:'reject challenge' to self;
			else
				generate Challenge5:'error'(message:result.error.error) to self;
			end if;
		end if;
		@endnoparse
	end state;

	state 'in progress' is
		@noparse
		LOG::LogInfo(message:"Challenge accepted: " + self.id);
		@endnoparse
	end state;

	state complete is
		@noparse
		LOG::LogInfo(message:"Challenge complete: " + self.id);
		delete object instance self;
		@endnoparse
	end state;

	transition 'in progress' ['game over'] => complete is
		@noparse
		LOG::LogInfo(message:"Challenge complete (game over): " + self.id);
		@endnoparse
	end transition;

	transition pending ['reject challenge'] => complete is
		@noparse
		LOG::LogInfo(message:"Challenge rejected: " + self.id);
		self.status = ChallengeStatus::DECLINED;
		@endnoparse
	end transition;

	transition pending ['accept challenge'] => 'in progress' is
		@noparse
		self.status = ChallengeStatus::ACCEPTED;
		@endnoparse
	end transition;

	transition pending ['challenger canceled'] => complete is
		@noparse
		LOG::LogInfo(message:"Challenge canceled: " + self.id);
		self.status = ChallengeStatus::CANCELED;
		@endnoparse
	end transition;

	transition pending [error] => complete('message': in string) is
		@noparse
		LOG::LogInfo(message:"Error responding to challenge: " + self.id + ": " + param.message);
		self.status = ChallengeStatus::CANCELED;
		@endnoparse
	end transition;

end;
