// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within lichess_bot is

  package EEs is
    @key_letters("ARCH");
    @realized;
    external Architecture is
      @dialect("oal");
      bridge openURL(url: in string);

      @dialect("oal");
      bridge shutdown() is
        @noparse
        control stop;
        @endnoparse
      end bridge;

    end external;

    @key_letters("ChessLib");
    @realized;
    external ChessLib is
      //! Takes as input a string representing a move in LAN and returns
      //! the destination file as a string /[a-h]/
      @dialect("oal");
      bridge destFile(move: in string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the destination rank as an integer 1-8
      @dialect("oal");
      bridge destRank(move: in string) return integer;

      //! Takes as input a FEN string representing the current position
      //! Returns a list of legal moves in the position
      @dialect("oal");
      bridge legalMoves(fen: in string, legal_moves: out sequence (218) of string) return integer;

      //! Takes as input a FEN string and a list of moves represenging the
      //! current position. The position is determined by applying the
      //! list of moves in order to the position indicated by the FEN
      //! string. The exact string "startpos" is taken to be the standard
      //! starting position. Returns a FEN string representing the
      //! position
      @dialect("oal");
      bridge movesToFEN(initialFen: in string, moves: in sequence (1024) of string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the source file as a string /[a-h]/
      @dialect("oal");
      bridge sourceFile(move: in string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the source rank as an integer 1-8
      @dialect("oal");
      bridge sourceRank(move: in string) return integer;

      //! Returns a FEN string representing the starting position.
      @dialect("oal");
      bridge startpos() return string;

    end external;

    @key_letters("LOG");
    @realized;
    external Logging is
      @dialect("oal");
      bridge LogDate(d: in date, 'message': in string);

      @dialect("oal");
      bridge LogFailure('message': in string);

      @dialect("oal");
      bridge LogInfo('message': in string);

      @dialect("oal");
      bridge LogInteger('message': in integer);

      @dialect("oal");
      bridge LogReal('message': in string, r: in real);

      @dialect("oal");
      bridge LogSuccess('message': in string);

      @dialect("oal");
      bridge LogTime('message': in string, t: in timestamp);

    end external;

    @key_letters("PROP");
    @realized;
    external Properties is
      @dialect("oal");
      bridge getBoolean(properties: in Properties, name: in string, default_value: in boolean) return boolean;

      @dialect("oal");
      bridge getInteger(properties: in Properties, name: in string, default_value: in integer) return integer;

      @dialect("oal");
      bridge getString(properties: in Properties, name: in string, default_value: in string) return string;

      @dialect("oal");
      bridge loadProperties(file_name: in string) return Properties;

    end external;

    //! The Time external entity provides date, timestamp, and timer related operations.
    @key_letters("TIM");
    @realized;
    external Time is
      //! Provide an offset to artificially advance time.
      @dialect("oal");
      bridge advance_time(microseconds: in timestamp) return timestamp;

      @dialect("oal");
      bridge create_date(day: in integer, hour: in integer, minute: in integer, month: in integer, second: in integer, year: in integer) return date;

      @dialect("oal");
      bridge current_clock() return timestamp;

      @dialect("oal");
      bridge current_date() return date;

      //! Return the number of seconds since the epoch.
      @dialect("oal");
      bridge current_seconds() return integer;

      @dialect("oal");
      bridge get_day(date: in date) return integer;

      @dialect("oal");
      bridge get_hour(date: in date) return integer;

      @dialect("oal");
      bridge get_minute(date: in date) return integer;

      @dialect("oal");
      bridge get_month(date: in date) return integer;

      @dialect("oal");
      bridge get_second(date: in date) return integer;

      @dialect("oal");
      bridge get_year(date: in date) return integer;

      //! Set the date and time for the timebase.  This will affect integer values representing time.
      @dialect("oal");
      bridge set_epoch(day: in integer, month: in integer, year: in integer);

      //! Set the current time in an absolute manner.
      @dialect("oal");
      bridge set_time(day: in integer, hour: in integer, microsecond: in integer, minute: in integer, month: in integer, second: in integer, year: in integer) return timestamp;

      @dialect("oal");
      bridge time_of_day(timeval: in timestamp) return timestamp;

      //! This bridge operation attempts to add the specified number of microseconds to a
      //! passed existing timer. If the timer exists (that is, it has not expired), a TRUE
      //! value is returned. If the timer no longer exists, a FALSE value is returned.
      @dialect("oal");
      bridge timer_add_time(microseconds: in integer, timer_inst_ref: in timer) return boolean;

      //! This bridge operation cancels and deletes the passed timer instance. If the
      //! timer exists (that is, it had not expired), a TRUE value is returned. If the
      //! timer no longer exists, a FALSE value is returned.
      @dialect("oal");
      bridge timer_cancel(timer_inst_ref: in timer) return boolean;

      //! Returns the time remaining (in microseconds) for the passed timer instance. If
      //! the timer has expired, a zero value is returned.
      @dialect("oal");
      bridge timer_remaining_time(timer_inst_ref: in timer) return integer;

      //! This bridge operation attempts to set the passed existing timer to expire in
      //! the specified number of microseconds. If the timer exists (that is, it has not
      //! expired), a TRUE value is returned. If the timer no longer exists, a FALSE value
      //! is returned.
      @dialect("oal");
      bridge timer_reset_time(microseconds: in integer, timer_inst_ref: in timer) return boolean;

      //! This bridge operation starts a timer set to expire in the specified number of
      //! microseconds, generating the passed event upon expiration. Returns the instance
      //! handle of the timer.
      @dialect("oal");
      bridge timer_start(event_inst: in 'inst<Event>', microseconds: in integer) return timer;

      //! This bridge operation starts a timer set to expire in the specified number of
      //! microseconds, generating the passed event upon expiration. Upon expiration, the
      //! timer will be restarted and fire again in the specified number of microseconds
      //! generating the passed event. This bridge operation returns the instance handle
      //! of the timer.
      @dialect("oal");
      bridge timer_start_recurring(event_inst: in 'inst<Event>', microseconds: in integer) return timer;

      //! Format a timestamp into a string according the the specified string using the Java standard.
      @dialect("oal");
      bridge timestamp_format(timestamp: in timestamp, format: in string) return string;

      //! Turn the input numeric timestamp into a string.
      @dialect("oal");
      bridge timestamp_to_string(timestamp: in timestamp) return string;

    end external;

    @key_letters("STRING");
    @realized;
    external string is
      @dialect("oal");
      bridge atoi(s: in string) return integer is
        @noparse
        return 0;
        @endnoparse
      end bridge;

      //! replaces all instances of ' with '' to escape the tics for SQL. Assumes that the result will still fit in the max
      //! string
      @dialect("oal");
      bridge escapetics(s: in string) return string;

      //! Returns the index of the first occurence of needle in haystack. Returns -1 if no match is found.
      @dialect("oal");
      bridge indexof(haystack: in string, needle: in string) return integer;

      @dialect("oal");
      bridge itoa(i: in integer) return string is
        @noparse
        mapping[9]="9"; mapping[8]="8"; mapping[7]="7"; mapping[6]="6"; mapping[5]="5";
        mapping[4]="4"; mapping[3]="3"; mapping[2]="2"; mapping[1]="1"; mapping[0]="0";
        
        i = param.i; s = "";
        while ( i >= 1 )
          d = i % 10;
          i = i / 10;
          s = mapping[ d ] + s;
        end while;
        
        return s;
        @endnoparse
      end bridge;

      //! Returns a literal double quote character as a string
      @dialect("oal");
      bridge quote() return string;

      @dialect("oal");
      bridge replaceall(s: in string, pattern: in string, replacement: in string) return string;

      @dialect("oal");
      bridge strlen(s: in string) return integer;

      //! returns a substring of the given string s starting at the index begin and ending at the index end - 1.
      //! if begin < 0, returns a substring starting at the beginning of s
      //! if begin > the length of s - 1, returns an empty string
      //! if end < 0 or > the length of s, returns a substring starting at begin to the end of s
      //! if end <= begin, returns empty string
      //! 
      //! usage examples:
      //! foo = substr( s:"Hello, World!", 4, 8 );	// foo == "o, Wo"
      //! bar = substr( s:"Hello, World!", 2, -1 );	// bar == "llo, World!"
      @dialect("oal");
      bridge substr(s: in string, begin: in integer, 'end': in integer) return string;

      //! Returns the input string with whitespace ( ' ', '\r', '\t', and '\n' ) trimmed from the beginning
      //! and the end of the string. If the input string is only whitespace, empty string is returned
      @dialect("oal");
      bridge trim(s: in string) return string;

      //! replaces all instances of '' with ' to un-escape the tics for SQL
      @dialect("oal");
      bridge unescapetics(s: in string) return string;

    end external;

  end package;

end;
